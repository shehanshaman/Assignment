$date
	Tue Sep 19 02:06:13 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module simulate $end
$var wire 3 ! INaddr [2:0] $end
$var wire 8 " Immediate [7:0] $end
$var wire 32 # Instruction [31:0] $end
$var wire 8 $ OPCODE [7:0] $end
$var wire 8 % OUT1 [7:0] $end
$var wire 3 & OUT1addr [2:0] $end
$var wire 8 ' OUT2 [7:0] $end
$var wire 3 ( OUT2addr [2:0] $end
$var wire 8 ) RESULT [7:0] $end
$var wire 32 * Read_addr [31:0] $end
$var wire 1 + mux0 $end
$var wire 8 , mux0out [7:0] $end
$var wire 1 - mux1 $end
$var wire 8 . mux1out [7:0] $end
$var wire 1 / mux2 $end
$var wire 8 0 mux2out [7:0] $end
$var wire 3 1 select [2:0] $end
$var wire 8 2 twosComplement0 [7:0] $end
$var wire 8 3 twosComplement1 [7:0] $end
$var reg 1 4 clk $end
$var reg 1 5 reset $end
$var reg 1 6 reset_reg $end
$scope module counter0 $end
$var wire 1 7 clk $end
$var wire 1 8 reset $end
$var reg 32 9 Read_addr [31:0] $end
$upscope $end
$scope module InsReg0 $end
$var wire 32 : Read_Addr [31:0] $end
$var wire 1 7 clk $end
$var wire 32 ; instruction [31:0] $end
$scope module insMemory0 $end
$var wire 32 < Read_addr [31:0] $end
$var reg 32 = Instruction [31:0] $end
$upscope $end
$upscope $end
$scope module cu0 $end
$var wire 3 > INaddr [2:0] $end
$var wire 8 ? Immediate [7:0] $end
$var wire 32 @ Instruction [31:0] $end
$var wire 8 A OPCODE [7:0] $end
$var wire 3 B OUT1addr [2:0] $end
$var wire 3 C OUT2addr [2:0] $end
$var wire 3 D select [2:0] $end
$var reg 1 E mux0 $end
$var reg 1 F mux1 $end
$var reg 1 G mux2 $end
$upscope $end
$scope module regf0 $end
$var wire 8 H IN [7:0] $end
$var wire 3 I INaddr [2:0] $end
$var wire 8 J OUT1 [7:0] $end
$var wire 3 K OUT1addr [2:0] $end
$var wire 8 L OUT2 [7:0] $end
$var wire 3 M OUT2addr [2:0] $end
$var wire 1 7 clk $end
$var reg 8 N reg0 [7:0] $end
$var reg 8 O reg1 [7:0] $end
$var reg 8 P reg2 [7:0] $end
$var reg 8 Q reg3 [7:0] $end
$var reg 8 R reg4 [7:0] $end
$var reg 8 S reg5 [7:0] $end
$var reg 8 T reg6 [7:0] $end
$var reg 8 U reg7 [7:0] $end
$upscope $end
$scope module tcmp0 $end
$var wire 8 V COMP [7:0] $end
$var wire 8 W IN [7:0] $end
$var wire 8 X nINplus [7:0] $end
$var wire 8 Y nIn [7:0] $end
$upscope $end
$scope module tcmp1 $end
$var wire 8 Z COMP [7:0] $end
$var wire 8 [ IN [7:0] $end
$var wire 8 \ nINplus [7:0] $end
$var wire 8 ] nIn [7:0] $end
$upscope $end
$scope module m0 $end
$var wire 8 ^ data1 [7:0] $end
$var wire 8 _ data2 [7:0] $end
$var wire 8 ` out [7:0] $end
$var wire 1 + select $end
$upscope $end
$scope module m1 $end
$var wire 8 a data1 [7:0] $end
$var wire 8 b data2 [7:0] $end
$var wire 8 c out [7:0] $end
$var wire 1 - select $end
$upscope $end
$scope module m2 $end
$var wire 8 d data1 [7:0] $end
$var wire 8 e data2 [7:0] $end
$var wire 8 f out [7:0] $end
$var wire 1 / select $end
$upscope $end
$scope module alu $end
$var wire 8 g DATA1 [7:0] $end
$var wire 8 h DATA2 [7:0] $end
$var wire 3 i Select [2:0] $end
$var reg 8 j Result [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1 j
b0 i
bx h
b1 g
bx f
bx e
bx d
b1 c
bx b
b1 a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
b0 M
bx L
b1 K
bx J
b100 I
b1 H
1G
1F
xE
b0 D
b0 C
b1 B
b1000 A
b1000000001000000000000000001 @
b1 ?
b100 >
b1000000001000000000000000001 =
b1 <
b1000000001000000000000000001 ;
b1 :
b1 9
08
07
06
05
04
bx 3
bx 2
b0 1
bx 0
1/
b1 .
1-
bx ,
x+
b1 *
b1 )
b0 (
bx '
b1 &
bx %
b1000 $
b1000000001000000000000000001 #
b1 "
b100 !
$end
#10
14
17
#20
b10 j
b10 )
b10 H
b10 .
b10 c
b10 g
b10 &
b10 B
b10 K
b110 !
b110 >
b110 I
b10 "
b10 ?
b10 a
b1000000001100000000000000010 =
b1000000001100000000000000010 #
b1000000001100000000000000010 ;
b1000000001100000000000000010 @
b1 R
b10 9
b10 *
b10 :
b10 <
04
07
#30
14
17
#40
b11 j
b11 )
b11 H
b11 .
b11 c
b11 g
b11 &
b11 B
b11 K
b11 !
b11 >
b11 I
b11 "
b11 ?
b11 a
b1000000000110000000000000011 =
b1000000000110000000000000011 #
b1000000000110000000000000011 ;
b1000000000110000000000000011 @
b11 9
b11 *
b11 :
b11 <
b10 T
04
07
#50
14
17
#60
b11111101 ]
b11111110 \
b11111110 3
b11111110 Z
b11111110 e
b10 0
b10 f
b10 h
b10 '
b10 L
b10 [
b10 d
b11111100 Y
b11111101 X
b11111101 2
b11111101 V
b11111101 _
b11 ,
b11 `
b11 b
b11 %
b11 J
b11 W
b11 ^
b11 .
b11 c
b11 g
b101 j
b101 )
b101 H
0F
0-
1E
1+
b1 1
b1 D
b1 i
b110 (
b110 C
b110 M
b101 !
b101 >
b101 I
b1 $
b1 A
b1000001010000011000000011 =
b1000001010000011000000011 #
b1000001010000011000000011 ;
b1000001010000011000000011 @
b11 Q
b100 9
b100 *
b100 :
b100 <
04
07
#70
14
17
#80
b101 .
b101 c
b101 g
b11111110 ]
b11111111 \
b11111111 3
b11111111 Z
b11111111 e
b1 0
b1 f
b1 h
b11111010 Y
b11111011 X
b11111011 2
b11111011 V
b11111011 _
b101 ,
b101 `
b101 b
b1 '
b1 L
b1 [
b1 d
b101 %
b101 J
b101 W
b101 ^
b1 j
b1 )
b1 H
b10 1
b10 D
b10 i
b101 &
b101 B
b101 K
b100 (
b100 C
b100 M
b1 !
b1 >
b1 I
b101 "
b101 ?
b101 a
b10 $
b10 A
b10000000010000010000000101 =
b10000000010000010000000101 #
b10000000010000010000000101 ;
b10000000010000010000000101 @
b101 9
b101 *
b101 :
b101 <
b101 S
04
07
#90
14
17
#100
b11111101 Y
b11111110 X
b11111110 2
b11111110 V
b11111110 _
b10 ,
b10 `
b10 b
b10 %
b10 J
b10 W
b10 ^
b110 .
b110 c
b110 g
b111 j
b111 )
b111 H
1F
1-
b11 1
b11 D
b11 i
b110 &
b110 B
b110 K
b1 (
b1 C
b1 M
b10 !
b10 >
b10 I
b110 "
b110 ?
b110 a
b11 $
b11 A
b11000000100000000100000110 =
b11000000100000000100000110 #
b11000000100000000100000110 ;
b11000000100000000100000110 @
b1 O
b110 9
b110 *
b110 :
b110 <
04
07
#110
14
17
#120
b11111000 Y
b11111001 X
b11111001 2
b11111001 V
b11111001 _
b111 ,
b111 `
b111 b
b111 %
b111 J
b111 W
b111 ^
bx ]
bx \
bx 3
bx Z
bx e
bx 0
bx f
bx h
b111 j
b111 )
b111 H
bx '
bx L
bx [
bx d
b111 .
b111 c
b111 g
0F
0-
b0 1
b0 D
b0 i
b10 &
b10 B
b10 K
b0 (
b0 C
b0 M
b111 !
b111 >
b111 I
b10 "
b10 ?
b10 a
b0 $
b0 A
b1110000000000000010 =
b1110000000000000010 #
b1110000000000000010 ;
b1110000000000000010 @
b111 9
b111 *
b111 :
b111 <
b111 P
04
07
#130
14
17
#140
b11111001 0
b11111001 f
b11111001 h
b11111000 ]
b11111001 \
b11111001 3
b11111001 Z
b11111001 e
b111 '
b111 L
b111 [
b111 d
b11 .
b11 c
b11 g
b11111100 Y
b11111101 X
b11111101 2
b11111101 V
b11111101 _
b11 ,
b11 `
b11 b
b11 %
b11 J
b11 W
b11 ^
b11111100 j
b11111100 )
b11111100 H
0G
0/
b1 1
b1 D
b1 i
b11 &
b11 B
b11 K
b111 (
b111 C
b111 M
b100 !
b100 >
b100 I
b11 "
b11 ?
b11 a
b1001 $
b1001 A
b1001000001000000011100000011 =
b1001000001000000011100000011 #
b1001000001000000011100000011 ;
b1001000001000000011100000011 @
b111 U
b1000 9
b1000 *
b1000 :
b1000 <
04
07
#150
14
17
#160
b1001 9
b1001 *
b1001 :
b1001 <
b11111100 R
04
07
